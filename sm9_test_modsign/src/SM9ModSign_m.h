//
// Generated file, do not edit! Created by nedtool 5.3 from SM9ModSign.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __SM9MODSIGN_M_H
#define __SM9MODSIGN_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0503
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
    #include "SM9_SignUtil.h"
// }}

/**
 * Class generated from <tt>SM9ModSign.msg:23</tt> by nedtool.
 * <pre>
 * message SM9ModSignature
 * {
 *     SM9_SIG_WRAP_T SM9Signature;
 *     int flag;
 * }
 * </pre>
 */
class SM9ModSignature : public ::omnetpp::cMessage
{
  protected:
    SM9_SIG_WRAP_T SM9Signature;
    int flag;

  private:
    void copy(const SM9ModSignature& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SM9ModSignature&);

  public:
    SM9ModSignature(const char *name=nullptr, short kind=0);
    SM9ModSignature(const SM9ModSignature& other);
    virtual ~SM9ModSignature();
    SM9ModSignature& operator=(const SM9ModSignature& other);
    virtual SM9ModSignature *dup() const override {return new SM9ModSignature(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual SM9_SIG_WRAP_T& getSM9Signature();
    virtual const SM9_SIG_WRAP_T& getSM9Signature() const {return const_cast<SM9ModSignature*>(this)->getSM9Signature();}
    virtual void setSM9Signature(const SM9_SIG_WRAP_T& SM9Signature);
    virtual int getFlag() const;
    virtual void setFlag(int flag);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SM9ModSignature& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SM9ModSignature& obj) {obj.parsimUnpack(b);}


#endif // ifndef __SM9MODSIGN_M_H


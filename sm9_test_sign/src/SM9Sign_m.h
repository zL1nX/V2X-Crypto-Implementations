//
// Generated file, do not edit! Created by nedtool 5.3 from SM9Sign.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __SM9SIGN_M_H
#define __SM9SIGN_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0503
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
    #include "SM9Sign_util.h"
    typedef SM9PublicParameters* SM9pkt;
// }}

/**
 * Class generated from <tt>SM9Sign.msg:24</tt> by nedtool.
 * <pre>
 * message SM9_SIGN_MSG_t
 * {
 *     SM9Sig_t SM9SigStruct;
 *     SM9pkt mpk;
 *     int flag;
 * }
 * </pre>
 */
class SM9_SIGN_MSG_t : public ::omnetpp::cMessage
{
  protected:
    SM9Sig_t SM9SigStruct;
    SM9pkt mpk;
    int flag;

  private:
    void copy(const SM9_SIGN_MSG_t& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SM9_SIGN_MSG_t&);

  public:
    SM9_SIGN_MSG_t(const char *name=nullptr, short kind=0);
    SM9_SIGN_MSG_t(const SM9_SIGN_MSG_t& other);
    virtual ~SM9_SIGN_MSG_t();
    SM9_SIGN_MSG_t& operator=(const SM9_SIGN_MSG_t& other);
    virtual SM9_SIGN_MSG_t *dup() const override {return new SM9_SIGN_MSG_t(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual SM9Sig_t& getSM9SigStruct();
    virtual const SM9Sig_t& getSM9SigStruct() const {return const_cast<SM9_SIGN_MSG_t*>(this)->getSM9SigStruct();}
    virtual void setSM9SigStruct(const SM9Sig_t& SM9SigStruct);
    virtual SM9pkt& getMpk();
    virtual const SM9pkt& getMpk() const {return const_cast<SM9_SIGN_MSG_t*>(this)->getMpk();}
    virtual void setMpk(const SM9pkt& mpk);
    virtual int getFlag() const;
    virtual void setFlag(int flag);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SM9_SIGN_MSG_t& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SM9_SIGN_MSG_t& obj) {obj.parsimUnpack(b);}


#endif // ifndef __SM9SIGN_M_H

